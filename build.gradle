buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'de.thetaphi:forbiddenapis:3.9'
    }
}

plugins {
	id 'base'
    id 'java-library'
    id 'maven-publish'
    // https://github.com/SgtSilvio/gradle-maven-central-publishing
    id 'io.github.sgtsilvio.gradle.maven-central-publishing' version '0.4.0'
    id 'io.codearte.nexus-staging' version '0.30.0'
}

apply plugin: 'de.thetaphi.forbiddenapis'
apply plugin: 'jacoco'
apply plugin: 'signing'
apply plugin: 'idea'

java {
  toolchain {
    sourceCompatibility = JavaVersion.VERSION_17
  }
}
group = 'org.dstadler'
base {
	archivesName = 'cover-the-world'
}

repositories {
	// for geotools (needs to appear before mavenCentral)
	maven { url = 'https://repo.osgeo.org/repository/release/' }

	mavenCentral()
}

forbiddenApis {
    suppressAnnotations = ['org.dstadler.commons.util.SuppressForbidden']
    // 'jdk-unsafe'
    bundledSignatures = [ 'jdk-system-out', 'jdk-non-portable', 'jdk-deprecated', 'jdk-reflection',
        'commons-io-unsafe-2.18.0', 'jdk-internal' ]
}
forbiddenApisMain {
    signaturesFiles += files('config/forbidden-apis/forbidden.signatures.txt')
}

dependencies {
    implementation 'org.dstadler:commons-dost:1.4.2'
    implementation 'org.apache.commons:commons-lang3:3.18.0'
    implementation 'commons-io:commons-io:2.20.0'
    implementation 'com.google.guava:guava:33.4.8-jre'
    // jcoords from https://github.com/xni06/JCoord
    implementation fileTree(dir: 'lib', include: ['*.jar'])
	// https://github.com/filosganga/geogson
	implementation 'com.github.filosganga:geogson-core:1.4.31'
    implementation 'org.geotools:gt-main:33.0'
    implementation 'org.geotools:gt-geojson:33.0'
    implementation 'org.geotools:gt-render:33.0'
	implementation 'jakarta.annotation:jakarta.annotation-api:3.0.0'

    // provide a logging.properties only when running the example, but
    // don't include it in the jar-file
    runtimeOnly files('src/runtime/resources')

	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.13.4'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.13.4'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.13.4'

    testImplementation 'org.dstadler:commons-test:1.0.0.22'
    testImplementation 'org.apache.logging.log4j:log4j-core:2.25.0'
}

wrapper {
    gradleVersion = '8.14.2'
}

test {
    maxHeapSize = "512m"
    systemProperties = System.properties

    // enable to show standard out and standard error of the test JVM(s) on the console
    // testLogging.showStandardStreams = true

    // http://forums.gradle.org/gradle/topics/jacoco_related_failure_in_multiproject_build
    systemProperties['user.dir'] = workingDir

    // avoid failures because Gradle provides it's own version of JNA in the system properties
    systemProperties['jna.boot.library.path'] = null

    useJUnitPlatform()
}

jacoco {
    toolVersion = '0.8.13'
}

tasks.register('sourcesJar', Jar) {
	archiveClassifier = 'sources'
	from sourceSets.main.allJava
}

tasks.register('javadocJar', Jar) {
	archiveClassifier = 'javadoc'
	from javadoc
}

tasks.withType(Jar).configureEach { task ->
    task.doLast {
        ant.checksum algorithm: 'md5', file: it.archivePath
        ant.checksum algorithm: 'sha1', file: it.archivePath
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'cover-the-world'
            from components.java

            pom {
                name = 'cover-the-world'
                description = 'Read GPX tracks and produce a world-map with covered tiles.'
                url = 'https://github.com/centic9/cover-the-world'
                licenses {
                    license {
                        name = 'BSD 2-Clause "Simplified" License'
                        url = 'https://github.com/centic9/cover-the-world/blob/main/LICENSE.md'
                    }
                }
                developers {
                    developer {
                        id = 'centic9'
                        name = 'Dominik Stadler'
                    }
                }
                scm {
                    connection = 'scm:git@github.com:centic9/cover-the-world'
                    developerConnection = 'scm:git@github.com:centic9/cover-the-world'
                    url = 'https://github.com/centic9/cover-the-world'
                }
            }
        }
    }
    repositories {
        maven {
            // change to point to your repo, e.g. http://my.org/repo
            //url = layout.buildDirectory.dir('repo')
            url = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
            credentials(PasswordCredentials)
            //snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/')
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}


idea {
  module {
    excludeDirs += [
        file('tilesSquares'),
        file('tilesSquaresAdjacent'),
        file('tilesSquaresCombined'),
        file('tilesSquaresNew'),
        file('tilesTiles'),
        file('tilesTilesAdjacent'),
        file('tilesTilesCombined'),
        file('tilesTilesNew')
    ]
  }
}

tasks.register('createZip', Zip) {
	from '.'
	excludes = ['bin', 'build', '.gradle', '.svn', '.git', '*.log', '*.log.*', '.idea',
				'out', '*.zip', 'tiles*']
}


tasks.register('updateFiles', JavaExec) {
	description = 'Run all steps to read the GPX files and produce the necessary files for the sample web application'

	mainClass = 'org.dstadler.ctw.CoverTheWorld'
	classpath = sourceSets.main.runtimeClasspath
	jvmArgs = ['-Xmx512m']
}


tasks.register('createAllSquares', JavaExec) {
	description = 'Create covered squares for all supported zooms'

	mainClass = 'org.dstadler.ctw.tiles.CreateTileOverlaysFromUTMRef'
	classpath = sourceSets.main.runtimeClasspath
	jvmArgs = ['-Xmx512m']
	args "all"
}

tasks.register('createNewSquares', JavaExec) {
	description = 'Create recently covered squares for all supported zooms'

	mainClass = 'org.dstadler.ctw.tiles.CreateTileOverlaysFromUTMRef'
	classpath = sourceSets.main.runtimeClasspath
	jvmArgs = ['-Xmx512m']
}

tasks.register('createAllTiles', JavaExec) {
	description = 'Create covered tiles for all supported zooms'

	mainClass = 'org.dstadler.ctw.tiles.CreateTileOverlaysFromTiles'
	classpath = sourceSets.main.runtimeClasspath
	jvmArgs = ['-Xmx512m']
	args "all"
}

tasks.register('createNewTiles', JavaExec) {
	description = 'Create recently covered tiles for all supported zooms'

	mainClass = 'org.dstadler.ctw.tiles.CreateTileOverlaysFromTiles'
	classpath = sourceSets.main.runtimeClasspath
	jvmArgs = ['-Xmx512m']
}

tasks.register('createAllAdjacentTiles', JavaExec) {
	description = 'Create adjacent tiles for all supported zooms'

	mainClass = 'org.dstadler.ctw.tiles.CreateAdjacentTileOverlaysFromTiles'
	classpath = sourceSets.main.runtimeClasspath
	jvmArgs = ['-Xmx512m']
	args "all"
}

tasks.register('createNewAdjacentTiles', JavaExec) {
	description = 'Create recent adjacent tiles for all supported zooms'

	mainClass = 'org.dstadler.ctw.tiles.CreateAdjacentTileOverlaysFromTiles'
	classpath = sourceSets.main.runtimeClasspath
	jvmArgs = ['-Xmx512m']
}

tasks.register('removeTiles', Exec) {
	description = 'Remove all pre-built tiles to rebuild them from scratch'

	workingDir '.'

	commandLine 'bash', '-c',
			'rm -rf tilesSquares tilesSquaresAdjacent tilesSquaresNew tilesSquaresCombined tilesTiles tilesTilesAdjacent tilesTilesNew tilesTilesCombined'
}

updateFiles.mustRunAfter removeTiles
createAllSquares.mustRunAfter updateFiles
createNewSquares.mustRunAfter updateFiles
createAllTiles.mustRunAfter updateFiles
createNewTiles.mustRunAfter updateFiles
createAllAdjacentTiles.mustRunAfter updateFiles
createNewAdjacentTiles.mustRunAfter updateFiles

tasks.register('tiles') {
	dependsOn updateFiles, createNewSquares, createNewTiles, createNewAdjacentTiles
}

tasks.register('rebuildTiles') {
	dependsOn removeTiles, createAllSquares, createAllTiles, createAllAdjacentTiles, tiles
}
